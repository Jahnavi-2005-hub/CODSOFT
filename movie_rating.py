# -*- coding: utf-8 -*-
"""Movie_Rating.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d7orbRNLK25CpBiIdLIqELO7K3AZj2Qp
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from scipy import stats
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingRegressor

df = pd.read_csv('IMDb Movies India.csv', encoding='ISO-8859-1')
df.head()

from matplotlib import pyplot as plt
df['Rating'].plot(kind='hist', bins=20, title='Rating')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df['Year'].plot(kind='hist', bins=20, title='Year')
plt.gca().spines[['top', 'right',]].set_visible(False)

df.describe()

df.dtypes

df.isna().sum()

df.dropna(subset=['Rating'], inplace=True)

df.isna().sum()

df['Genre'] = df['Genre'].fillna('Unknown')

df.isna().sum()

negative_years = df[df['Year'] < 0]
print(f"Number of rows with negative years: {len(negative_years)}")
display(negative_years.head())

df['Year'] = df['Year'].abs()
df['Year'] = df['Year'].astype(int)
print("Converted negative years to positive and cast to integer.")
display(df.head())

print(df['Year'].dtypes)

df['Votes'] = df['Votes'].str.replace(',', '', regex=False)
df['Votes'] = pd.to_numeric(df['Votes'])
print("Converted 'Votes' column to numeric.")
display(df.head())

df.dtypes

df.drop(['Name', 'Duration', 'Actor 3'], axis=1, inplace=True)
display(df.head())

df = pd.get_dummies(data=df,columns=['Director'])

df = pd.get_dummies(data=df,columns=['Genre'])

df = pd.get_dummies(data=df,columns=['Actor 1'])

df = pd.get_dummies(data=df,columns=['Actor 2'])

df.head()

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

X = df.drop(columns=['Rating'])
Y = df['Rating']

print("X and Y defined successfully.")

X.head()

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,random_state=42)

X_train

from sklearn.ensemble import RandomForestRegressor
regressor_model = RandomForestRegressor(n_estimators=100, random_state=42)
regressor_model.fit(X_train, Y_train)
print("RandomForestRegressor model fitted successfully.")

from sklearn.metrics import classification_report

from sklearn.metrics import mean_squared_error, r2_score

predictions = regressor_model.predict(X_test)
mse = mean_squared_error(Y_test, predictions)
r2 = r2_score(Y_test, predictions)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

import pandas as pd

movie = {'Year': 2020,
         'Votes': 140,
         'Actor 1_Rasika Dugal': 0,
         'Actor 1_Prateik': 1,
         'Actor 1_Bobby Deol': 0,
         'Actor 1_Jimmy Sheirgill': 0,
         'Actor 1_Yash Dave': 0,
         'Director_Ovais Khan': 0,
         'Director_Rahul Rawail': 1,
         'Actor 2_Vivek Ghamande': 1
        }

movie_df = pd.DataFrame([movie])

movie_df = movie_df.reindex(columns=X_train.columns, fill_value=0)

display(movie_df)

predicted_rating = regressor_model.predict(movie_df)
print(f"The predicted rating for the movie is: {predicted_rating[0]:.2f}")

average_rating_per_year = df.groupby('Year')['Rating'].mean().reset_index()
plt.figure(figsize=(12, 6))
plt.plot(average_rating_per_year['Year'], average_rating_per_year['Rating'])
plt.xlabel('Year')
plt.ylabel('Average Rating')
plt.title('Average Movie Rating Over Time')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Votes'], df['Rating'], alpha=0.5)
plt.xlabel('Votes')
plt.ylabel('Rating')
plt.title('Votes vs Rating')
plt.grid(True)
plt.show()