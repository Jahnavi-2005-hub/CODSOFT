# -*- coding: utf-8 -*-
"""Sales_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w2ddzRLZT0myZ1oT_G0B_vXoOIVoTdYW
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor
from xgboost import XGBRegressor
import xgboost as xgb
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV

df = pd.read_csv("advertising.csv")

df.head()

from matplotlib import pyplot as plt
df['Sales'].plot(kind='hist', bins=20, title='Sales')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df['Newspaper'].plot(kind='hist', bins=20, title='Newspaper')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df['Radio'].plot(kind='hist', bins=20, title='Radio')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df['TV'].plot(kind='hist', bins=20, title='TV')
plt.gca().spines[['top', 'right',]].set_visible(False)

df.info()

df.drop_duplicates(inplace=True)
print("Shape after removing duplicates:", df.shape)

df.describe(include= 'all').round(2)

df=df[df['Newspaper']<=90]

features = [i for i in df.columns if i not in ['Sales']]
features

continuous_variables = ['TV', 'Radio', 'Newspaper']

continuous_feature_df = pd.DataFrame(df[continuous_variables])

continuous_feature_df

from sklearn.linear_model import LinearRegression
model = LinearRegression()

X = df.drop('Sales',axis=1)
y = df['Sales'].values

X.head()

scaler = StandardScaler()
X = scaler.fit_transform(df[features])

y_train.value_counts()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

reg = LinearRegression()
reg.fit(X_train, y_train)
y_pred_li = reg.predict(X_test)

def evaluate_model(model, y_test, y_pred):
  mse = mean_squared_error(y_test,y_pred)
  rmse = np.sqrt(mse)
  mae = mean_absolute_error(y_test,y_pred)
  y_train_pred = model.predict(X_train)
  r2_train = r2_score(y_train, y_train_pred)
  r2 = r2_score(y_test,y_pred)
  r2_adj = 1-(1-r2_train)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)
  print("MSE :" , mse)
  print("RMSE :" ,rmse)
  print("MAE :" ,mae)
  print("Train R2 :" ,r2_train)
  print("Test R2 :" ,r2)
  print("Adjusted R2 :" ,r2_adj)
  plt.figure(figsize=(10,4))
  plt.plot((y_pred)[:100])
  plt.plot((np.array(y_test)[:100]))
  plt.legend(["Predicted","Actual"])
  plt.title('Actual and Predicted Sales', fontsize=12)
  model_score = [mse,rmse,mae,r2_train,r2,r2_adj]
  return model_score

score = pd.DataFrame(index = ['MSE', 'RMSE', 'MAE', 'Train R2', 'Test R2','Adjusted R2'])

linear_score = evaluate_model(reg, y_test,y_pred_li)
score['Linear regression'] = linear_score

score